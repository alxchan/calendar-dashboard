@using CalendarDashboard.Models
@using Google.Apis.Calendar.v3.Data
@using System.Text.Json
@inject ApiClientService apiClientService

@{
    var today = DateTime.Today;
    // Find the Sunday of the current week (assuming Sunday start)
    var sunday = today.AddDays(-(int)today.DayOfWeek);

    var days = Enumerable.Range(0, 7)
    .Select(i => sunday.AddDays(i))
    .ToList();
}

@if (isLoading)
{
    <p class="text-primary-text">Loading...</p>
}
else
{
    <p class="text-primary-text">Data loaded successfully: @data</p>
    <div class="grid grid-cols-7 [&>*]:text-primary-text gap-1 [&>*]:bg-secondary-background [&>*]:text-center h-full">
        @* Needs to contain: Event name, Time *@
        @for (int i = 0; i < 7; i++)
        {
            var day = days[i];
            var dayEvents = calendarEvents!.Where(e => DateTime.Parse(e.StartTime.DateTimeRaw).Date == day.Date).ToList();

            <div class="col-start-@i+1 h-1/12 gap-1 flex flex-col items-center justify-center">
                <div>@day.ToString("dddd")</div>
                <div>@day.Day</div>
                @foreach (var evt in dayEvents)
                {
                    <div class="bg-primary-background text-primary-text p-1 rounded shadow w-full mt-1 col-start-@i+1">
                        <div class="font-semibold">@evt.Name</div>
                        <div class="text-sm">@DateTime.Parse(evt.StartTime.DateTimeRaw).ToString("h:mm tt") - @DateTime.Parse(evt.EndTime.DateTimeRaw).ToString("h:mm tt")</div>
                    </div>
                }
            </div>
        }
    </div>
}
@code {
    private string? data;
    private bool isLoading = true;
    private List<LocalEvent> calendarEvents;

    protected override async System.Threading.Tasks.Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {

            try
            {
                calendarEvents = await apiClientService.CallApiAsync("/api/calendar/test");
                // calendarEvents = JsonSerializer.Deserialize<List<LocalEvent>>(data!)!;
            }
            catch (HttpRequestException ex)
            {
                Console.WriteLine($"Error fetching data: {ex.Message}");
                data = null;
            }
            finally
            {
                isLoading = false;
                StateHasChanged();
            }
        }
    }
}